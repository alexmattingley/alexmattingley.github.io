{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;\red164\green8\blue0;\red255\green39\blue18;
\red134\green205\blue77;\red103\green103\blue103;\red77\green77\blue77;\red38\green38\blue38;\red0\green45\blue153;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww14060\viewh11400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs28 \cf2 CONDITIONALS: 
\b0\fs24 \cf0 \
\
Single = sign assigns the variable, double == sign confirms the variable. For example\
\
<?php\
$pageTitle="contact";\
if ($pageTitle =="contact") \{\
	echo "You are on the contact page!";\
\}\
?>\
\

\b\fs28 \cf2 Forms\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 Basic Forms:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs24 \cf0 <form \cf2 (Form Tag*)\cf0  method="post" action="contact-process.php" action ="contact-process.php"\cf2 (This is where the form is being sent)\cf0 > \
<table>\
		<tr>\
			<th>\
				<label for= "name">Name</label> \cf2 for=id in order for the label to know where to line up\cf0 \
			</th>\
			<td>\
				<input type="text" name= "name" id="name">\cf2  Great but only for single lines of text\cf0 \
			</td>\
		</tr>	\
		<tr>\
			<th>\
				<label for= "email">Email</label>\cf2  This tag attaches to a form field\cf0 \
			</th>\
			<td>\
				<input type="text" name= "email" id="email">\
			</td>\
		</tr>		\
		<tr>\
			<th>\
				<label for= "message">Message</label>\
			</th>\
			<td>\
				<textarea name= "message" id="message"></textarea> \cf2 good for large area of text\cf0 \
			</td>\
		</tr>				\
	</table>\
		<input type="submit" value="send">\
	</form>\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs36 \cf2 \
\
Arrays\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs24 \cf0 Array:  a variable that contains that contains other variables\
Array element: each variable within an array\
each element has an index that can be used to identify it. start at zero work your way up.\
\
Format of an array:\
\
<?php\
$variable = array("element0", "element1", "elementx")\
?>\
\
To access each individual element by number:\
\
<?php\
 echo $variable[x];\
?>\
\
You can also use concoction to express multiple variables at once like so:\
\
<?php\
echo $flavors [0] . $flavors [1];\
?>\
\
You can also count the number of variables using the count function:\
\
<?php\
echo count($variable);\
?>\
\
Too list all the variables (elements) at once you use the foreach command:\
\
<?php\
\
foreach ($flavors as $flavor) \{\
	echo $flavor;\
\}\
?>\
\
You can also add individual elements to an array.\
\
Lets say that you an array:\
\
<?php\
$products = array('Logo Shirt, Red', \
	'Mike the Frog Shirt, Black', \
	'Mike the Frog shirt, Blue' \
	);\
\
?>\
\
And you want to add another element. Ultimately, it will look like this:\
\
<?php\
$products = array('Logo Shirt, Red', \
	'Mike the Frog Shirt, Black', \
	'Mike the Frog shirt, Blue' \
	);\
\
?>\
\
<?php \
$products[] = 'Logo Shirt, Green'; \
?>\
\
If you want (recommended) you can also list all of the flavors with an empty array:\
\
<?php\
$products = array() ;\
$products[] = 'Logo Shirt, Red';\
$products[] = 'Mike the Frog Shirt, Black'; \
$products[]	= 'Mike the Frog shirt, Blue'; \
$products[] = 'Logo Shirt, Green'; \
?>\
\
This will allow you to give each element an ID which you can reference later. See example below:\
\
<?php\
$products = array() ;\
$products[101] = 'Logo Shirt, Red';\
$products[102] = 'Mike the Frog Shirt, Black'; \
$products[103]	= 'Mike the Frog shirt, Blue'; \
$products[104] = 'Logo Shirt, Green'; \
?>\
\
You can also assign elements non-numerical values. These are known as associative arrays.\
\
Example of an associative array:\
\
<?php $surfspots = array(); \
$surfspots["spotname"] = "Blacks Beach";\
$surfspots["bottom"] = "Sand/Deepwater Trench";\
$surfspots["Difficulty"] = 8;\
$surfspots["Crowd"] = "Aggresive, packed";\
?>\
\
\
<h1>Surf Spot Charactization</h1>\
\
\
<ul>\
\
	<li>Spot Name: <?php echo $surfspots["spotname"] ;?></li>\
	<li>Bottom Type: <?php echo $surfspots["bottom"] = "Sand/Deepwater Trench";?></li>\
	<li>Difficulty Level: <?php echo $surfspots["Difficulty"] = 8; ?></li>\
	<li>Crowd-Factor: <?php echo $surfspots["Crowd"] = "Aggresive, packed";?></li>\
\
</ul>\
\
Another example of the same thing is:\
\
<?php\
$surfspots = array(\
"spotname" => "Blacks Beach",\
"bottom" => "Sand/Deepwater Trench",\
"Difficulty" => 8,\
"Crowd" => "Aggresive, packed",\
);\
?>\
\
\
<h1>Surf Spot Charactization</h1>\
\
\
\
<ul>\
\
	<li>Spot Name: <?php echo $surfspots["spotname"] ;?></li>\
	<li>Bottom Type: <?php echo $surfspots["bottom"] = "Sand/Deepwater Trench";?></li>\
	<li>Difficulty Level: <?php echo $surfspots["Difficulty"] = 8; ?></li>\
	<li>Crowd-Factor: <?php echo $surfspots["Crowd"] = "Aggresive, packed";?></li>\
\
</ul>\
\
\
Nesting Arrays within Arrays\
\
This is also known as a multi dimensional array. Basically you can make each element in an array an array. Like so:\
\
<?php\
\
$surfspots = array();\
$surfspots[0] = array(\
	"spotname" => "Blacks Beach",\
	"bottom" => "Sand/Deepwater Trench",\
	"difficulty" => 8,\
	"crowd" => "Aggresive, packed",\
);\
\
$surfspots[1] = array(\
	"spotname" => "Rincon",\
	"bottom" => "Sand/pebbled",\
	"difficulty" => 5,\
	"crowd" => "Varies, usually crowded",\
);\
\
?>\
<?php foreach ($surfspots as $surfspot) \{ ?>\
<ul>\
	<li>Spot Name: <?php echo $surfspot["spotname"]; ?></li>\
	<li>Bottom Type: <?php echo $surfspot["bottom"]; ?></li>\
	<li>Difficulty Level: <?php echo $surfspot["difficulty"]; ?></li>\
	<li>Crowd-Factor: <?php echo $surfspot["crowd"]; ?></li>\
\
</ul>\
\
<?php \} ?>\
\
You can thing of each array as a different level. See shirts.php for more notes but I like to think of it like so:\
\
$surfspots = array(); -Level 1\
$surfspots[#] = array( -Level 2\
""spotname" => "Blacks Beach", -level 3\
\
Each level is nested in the level above it. So Level 2 are elements in Level 1 and Level 3 are elements in level 2.\
\
You should also pay close attention to the foreach loop in shirts.php.\
\
Understanding whitespace.\
\
Apparently whitespace in between html tags and php changes the form of the page. So for our t-shirt store in order to get rid of white space we echo our html tags. \
\
This is cool because it allows us to never break the php tags.\
\
Check it out:\
\
<?php \
$titlepage = "Mikes Full Catalog of Shirts";\
$section = "shirts";\
include ('inc/header.php'); \
?>\
	\
	<div class="section shirts page">\
\
		<div class="wrapper">\
\
			<h1>Mike's Full Catalog of shirts</h1>\
			<ul class="products">\
				\cf3 <!--pay close attention to the foreach loop below, its basically the basis for an array. EDIT: Changed it to include html-->\
\cf0 				<?php foreach ($products as $product) \{\
						echo '<li>';\
						echo '<a href = "#">';\
						echo '<img src="' . $product['img'] . '" alt="' . $product['name'] . '">';\
						echo '<p>View Details</p>';\
						echo '</a>';\
						echo '</li>';\
				\} ?>\
			</ul>	\
		</div>\
	</div>\
\
<?php include ('inc/footer.php'); ?>\
\
\
\
How to integrate with Paypal\
\
\
First I created a paypal account.\
\
Then you want to create a button. For the shirts 4 Mike site you want a shopping cart button. Then paypal asks for a product id. THIS IS THE SAME AS THE ID YOU USED IN PHP.\
\
You create the button.\
\
See the creating Paypal Buttons video.\
\
Basic jist of things is that paypal creates code for you site so you can create a button and then add it to the site. Now the cool thing is that you can change the values in your website and they will be reflected in the shopping cart. So if you want to change the name of the shirt or the sizes you can do so. Its pretty cool\'85BUT..anybody with a chrome developer tool and can also create fraudulent shirts for their own cart. The only thing they can't change is the price (thankfully).\
\
Most important step is that we update our products array with the paypal id:\
\
I have highlighted the number in the code below:\
\
<form target="paypal" action="https://www.paypal.com/cgi-bin/webscr" method="post">\
<input type="hidden" name="cmd" value="_s-xclick">\
<input type="hidden" name="hosted_button_id" value=\cf4 \cb5 "W43ETYM5ZJ8JA"\cf0 \cb1 >\
<table>\
\
Each item is going to have its own id, its important that we add that id to the products array.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf4 **The quiz was difficult here, if you are having issues later, you should probably take a look at it again.**\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Including the Products Array:\
\
Things get a little trickier here, but basic idea is that we are going to have a t-shirt page for each individual shirt. Each of those pages are going to be pulling from the same list of product array. So the solution is use include to pull the data from another page. \
\
I create products.php, which is just basically our product list. I then deleted our products arrayout of shirts.php and put in an include command to pull the array to shirts.php.\
\
The next thing we want to do is modify our foreach loop to include the product key. There is another way that the foreach loop can be written so that it also loads the product key into the working variable:\
\
foreach ($variables as $key[this is the product #]=> $variable)\
\
An example of this in our document:\
\
foreach ($products as $product_id => $product) \
\
We also made it possible for each individual shirt to be a link to its own individual page with its own unique identity using that product id.\
\
echo '<a href="shirt.php?id=' . $product_id . '">';\
\
The thing to keep in mind about the above statement is that the periods separate each individual elements that need to be echoed. this is concatenation. General structure:\
\
echo 'x' . $variable . 'y';\
\
The thing that is weird about echoing links is that the link equation requires quotation marks like so:\
\
<a href="shirts.php">\
\
So that means you have to be aware of two sets of markings: the ' and the ".\
\
I don't think there is a whole lot else that needs to be said here, but the video lesson has a lot of detail so if you are confused at this step, take a look at "building the shirts detail page" lesson again.\
\
\
Adding Available Sizes:\
\
We are adding a third dimension array to our products pages.\
\
$products = array();\
$products[101] = array(\
    "name" => "Logo Shirt, Red",\
    "img" => "img/shirts/shirt-101.jpg",\
    "price" => 18,\
    "paypal" => "W43ETYM5ZJ8JA",\
    "sizes" => array('Small','Medium','Large')   -Sizes is another array.\
\
If we want to display those shirt sizes we have to go into the paypal form that we created earlier and change the option value to a php value/ chunk of code. \
\
Like so:\
\
<td><select name="os0" id="os0">\
	<?php foreach ($product["sizes"] as $size) \{ ?>\
		<option value="<?php echo $size; ?>"><?php echo $size; ?></option>\
	<?php \} ?>\
</select></td>\
\
More stuff on Arrays:\
\
Basic structure of an array and a foreach loop:\
\
<?php\
$array_name = array("key"=>"value", "key"=>"value","key"=>"value" \'85)\
\
foreach($array_name as $key=>$value) \{\
	echo (you can echo, $key, $values, etc) ;\
\}\
?>\
\
\
A couple of things to keep in mind. \
\
1. Even if you do not express a key, the server will automatically assign it a # based on order in relation to other values. \
2. Arrays come in many different forms.\
\
Introducing Functions:\
\
Functions: a block of code that can be called from within other blocks of code. Php has several functions built in.\
\
Count is actually a function.\
\
3 main parts to a function:\
\
Function name\
Argument list\
Return Value (e.g. with the count function this is the number of elements in the array)\
\
$return_value = function_name(Argument_List);\
\
Eg:\
\
$count=count($flavors);\
\
Introducing User Defined Functions:\
\
Structure:\
\
function = fucntion_name (argument_list) \{\
\}\
\
How to create a function:\
\
This is the basis for everything, if you are confused, review the video: \
\
Things to note: Variables created outside of a function are not available outside of a function. Your main code cannot see any of the variables inside of your function and your function can't see any of the variables outside of your function.\
\
\
Example of a function that mimics the count command. \
\
<?php\
\
function mimic_count ($array) \{\
\
	$count = 0;\
	foreach ($array as $element) \{\
		$count = $count + 1;\
	\}\
	return $count;\
\}\
\
$flavors = array('vanilla','chocolate', 'cookie dough' );\
$count = mimic_count($flavors);\
echo $count;\
\
?>\
\
Steps to building a function:\
\
Lets say you want to create a function that imitates the array_sum native command in php. This means that you want to create a function that adds up an array of assorted values.\
\
\
First create the array:\
\
eg:\
\
<?php\
\
$palindromic_primes = array(11, 757, 16361);\
\
?>\
\
Then create the function name, which you can continue to use throughout your php document.\
\
function mimic_array_sum($array) \{\}\
\
In this case the function is called mimic_array_ sum. Then you want to tell the function what to do with a foreach loop.\
\
In this case you\'92ll need to use a foreach command to loop through the argument array, a working variable to keep the running total, and a return command to send the sum back to the main code. Like so:\
\
function mimic_array_sum($array) \{\
\
	foreach ($array as $element)\{\
	$surf = $surf + $element;	\
\}\
return $surf;\
\
\}\
\
I used surf because I couldn't think of anything else, but you could use $boobs if you want it does not really matter.\
\
Lastly you can use the function anywhere you want in the code:\
\
Lets add that array we had earlier of weird primes.\
\
<?php\
$palindromic_primes = array(11, 757, 16361);\
$sum = mimic_array_sum($palindromic_primes);\
echo "If we add all of the palindromic primes together we get: " . $sum;\
?>
\f1 \
\

\f0 So finally all together it will look like so:\
\
function mimic_array_sum($array) \{\
\
$surf = 0;\
	foreach ($array as $element)\{\
	$surf = $surf + $element;	\
\}\
return $surf;\
\
\}\
\
\
\
$palindromic_primes = array(11, 757, 16361);\
$sum = mimic_array_sum($palindromic_primes);\
echo "If we add all of the palindromic primes together we get: " . $sum;\
\
?>\
\
Creating the Shirt Display Funciton\
\
On our website want to create a function that will load the HTML/ CSS into our main page and our shirts.php page.\
\
The function will look like so:\
\
function get_list_view_html($product_id, $product) \{\
//HTML output\
return $output;\
\}\
\
We put the function into an include file specifically products.php.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf2 \
Note: \cf0 It does not matter what variables you use in the above function. They simply function as a place holder and help you identify why you created the function.\
\
On Products.php:\
\
<?php\
\
function get_list_view_html($product_id, $product) \{\
    \
    $output = "";\
    $output = $output . '<li>';\
    $output = $output . '<a href="shirt.php?id=' . $product_id . '">';\
    $output = $output . '<img src="' . $product['img'] . '" alt="' . $product['name'] . '">';\
    $output = $output . '<p>View Details</p>';\
    $output = $output .  '</a>';\
    $output = $output .  '</li>';\
\
    return $output;\
\}\
\
\
A couple of things to note here. Again I will reiterate, the variables in this function can be named anything. They are only relevant to their particular equation.\
\
$output is also a place holder of sorts. It holds the values as you add onto it and it also functions as the variable that is returned to the document.\
\
On Index.php and shirts.php:\
\
<?php foreach ($products as $product_id => $product) \{\
	echo get_list_view_html($product_id,$product);\
	\} \
?>		\
\
This is calling the function from products.php.\
\
Finished up functions exercises. I am not entirely sure why they did some of things that they did. But some interesting stuff:\
\
You can concatenate in a different order and change the output pretty significantly.\
\
For example: \
\
<?php \
	$total_products = count($products);\
	$position = 0;\
	$list_view_html = "";\
	foreach ($products as $product_id => $product) \{\
		$position = $position + 1;\
		if ($total_products - $position < 4) \{\
			\cf2 $list_view_html = get_list_view_html($product_id,$product) . $list_view_html; \cf6 //This li\cf7 ne will allow you display the shirts in reverse.\cf0 \
			\}\
		\}\
		echo $list_view_html; \
	?>\
\
I did not totally understand why he chose to change the code here. the $ position, $total products stuff was so that we could have the option of displaying only four shirts on the home page.	\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs28 \cf2 More function practice with code academy:\
\
\pard\pardeftab720\sa240

\f1\fs24 \cf0 The typical structure of a function is as follows:\
\pard\pardeftab720

\f2 \cf0 	function name(parameters/argument) \{\
  		statement;\
	\}\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240
\ls1\ilvl0
\f1 \cf0 {\listtext	1.	}The keyword 
\f2 function
\f1  indicates that the code following it will be a user-defined function. \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240
\ls1\ilvl0
\f2 \cf0 {\listtext	2.	}name
\f1  indicates the name of a function, which is case 
\i insensitive
\i0 . The name of a function can contain numbers, letters, underscores or dashes.\
{\listtext	3.	}The 
\b arguments
\b0 , or 
\b parameters
\b0 , will be the optional input a function uses to perform calculations. Remember from treehouse, this is more a place holder.\
{\listtext	4.	}And of course, the 
\b statements
\b0  themselves will be the code the function executes when it is called.\
\pard\tx720\pardeftab720\sa240
\cf0 \
\pard\pardeftab720
\cf0 Parameters and Arguments\
\pard\pardeftab720\sa240
\cf0 Functions wouldn't be nearly as useful if they weren't able to take in some input. This is where 
\b parameters
\b0  or 
\b arguments
\b0  come in. These are the variables or inputs that a function uses to perform calculations.\
\pard\pardeftab720

\f2 \cf0 \
function squareValue($number) \{\
  echo $number * $number;\
\} \
\pard\pardeftab720\sa240

\f1 \cf0 \
The function 
\f2 squareValue
\f1 , above, takes one parameter, which it multiplies by itself and then echos the result. The names of the parameters themselves are used internally within the function, so they should be named something helpful.\
You can also use multiple parameters as long as they are separated by commas.\
\
More information about Contact forms ( I skipped this before so I am going back and doing it again)\
Checking the Request Method:\
We can check the request method using the $_SERVER variable. Its an array with multiple elements. The element we want to check is request method. The top line of the below code is how the request method is checked. If the request_method == "POST" then execute code.\
\pard\pardeftab720
\cf0 <?php\
\
if ($_SERVER["REQUEST_METHOD"] == "POST") \{\
$name = $_POST["name"];\
$email = $_POST["email"];\
$message = $_POST["message"];\
$email_body = "";\
$email_body = $email_body . "Name: " . $name . "<br>";\
$email_body = $email_body . "Email: " .$email . "<br>";\
$email_body = $email_body . "Message: " . $message;\
\
//TODO: Send Email\
\
header("Location: contact.php");\
exit;\
\}\
?>\
\pard\tx720\pardeftab720\sa240
\cf0 \
Working with Get Variables\
we need somehow to let the server know to display the "Thank you message" instead of the form. We can accomplish that by adding a string at the end of the web address. \
After the filename, type a question mark and a variable with any name. Let's call it "status." It should look like so:\
header("Location: contact.php?status=thanks");\
We'll use an equal sign and then specify a value of thanks. Variables added to the web address in this manner getsent in the server along with the request for the web page. They are available in a special PHP variable called $_get.\
This variable works just like the _post and _server variables we've already looked at. The element we want to check here is status. The same name we gave it in the web address. We can use this value in a conditional to check whether we should show the form or the thank you message.\
Here is the conditional:\
\
\pard\tx720\pardeftab720
\cf0 <?php if ($_GET["status"] == "thanks") \{ ?>\
		\
		<p style= "text-align:center;">Thanks! We will contact you shortly!</p>\
\
	<?php \} else \{ ?>\
\
		<p>I&rsquo;d love to hear from you! Complete the form to send me an email.</p>\
	\
		\cf2 	//\'85I cut out a bunch here for simplification purposes\'85.\
\cf0 \
		</form>\
	<?php \} ?>\
\
\pard\tx720\pardeftab720\sa240
\cf0 Next we want to check to see if the status variable exists using the isset function:\
\
Validating Contact Form Data\
We don't want people sending forms without any values attached to them so we need to set up conditions so we can echo out error messages.\
\pard\tx720\pardeftab720
\cf0 <?php\
\
if ($_SERVER["REQUEST_METHOD"] == "POST") \{\
	$name = trim($_POST["name"]);\
	$email = trim($_POST["email"]);\
	$message = trim($_POST["message"]);\
\
if ($name == "" OR $email =="" OR $message =="") \{\
	echo "You must specify a values.";\
	exit;\
\}\
\
?>\
\
A couple of different things in the above code you should be aware of:\
\
Trim: This makes sure people don't just submit spaces. It trims off spaces from the beginning and the ends of words. You can also put trip into each variable in the if statement if you like instead, but there is no reason for that.\
\
Two major security threats:\
\
1. Robots that post information on your site hoping to get content seen or posted.\
2. Robots that can use your contact form to send out emails to hundreds if not thousands to different email addresses.\
\
You need to make sure to account for both of these types of robots:\
\
foreach ($_POST as $value) \{\
	if( stripos($value, 'Content-Type') !== FALSE) \{\
		echo "There was a problem with the information you entered, you maybe a robot.";\
		exit;\
	\}\
\}\
\
This is for the second robot. I am not entirely sure why it works but it keeps those fuckers from hacking you.\
\
if ($_POST["address"] != "") \{\
	echo "Your form has an error.";\
	exit;\
\
This is for the first robot type of robot. You create a fake none visible field. Robots don't use a visible browser, they scrape the hmtl, so if they fill it out the form won't send. Its known as a honeypot. \
\
\
\
Using a Third Party Library.\
\
Video discusses the differences between and include, require, include once and require once function/variable.\
\
Commands that are similar to the include command:\
\
Include, require, include once, require once\
\
Difference between include command and require: If you include a file that does not exist, php will still try to execute the code best it can, while the require command will cause an error page to display. Certain files that contain functions should only be loaded once, a good example of this is the phpmailer file.\
\
\pard\tx720\pardeftab720

\fs28 \cf2 Object Variables\
\pard\tx720\pardeftab720

\fs24 \cf0 \
Object- is a collection of functions and variables all rapped up together. \
\
Bicycle example: Bicycle is an object: Variables might include color, Frame type etc. These variables are called 
\fs28 \cf2 properties. 
\fs24 \cf0 The Bicycle might also have functions these might include brakes,  ability to change gears etc. These are called 
\fs28 \cf2 methods. 
\fs24 \cf0 So in an object:\
\
Variables = Properties\
\
Functions = Methods.\
\
PHPMailer uses an object to send the email.\
\
A couple of important symbols for objects:\
\
the -> is related to properties and methods in objects much in the same way that the => is related to elements in an array.\
\
Specifying a method:\
\
$variablename-> methodname(argumentlist);\
\
In our example our method is:\
\
$mail->ValidateAddress($email)\
\
We then put the code in an if statement with a negative value:\
\
if (!$mail->ValidateAddress($email))\{\
		echo "You must specify a valid email address.";\
		exit;\
	\}\
\
At the end of the exercise we are left with:\
\
require_once('inc/phpmailer/class.phpmailer.php');\
	$mail = new PHPMailer();\
	\
//the below code will check for a valid email address. If its not valid we want display \
//the error message.\
	\
	if (!$mail->ValidateAddress($email))\{\
		echo "You must specify a valid email address.";\
		exit;\
	\}
\f0 	\
More notes for third party libraries:\
\
When someone refers to a library they are referring the files that are used in the PHPMailer. Third party library is just a stack of documents created by a third party, as in you do not create it yourself, you sort of burrow the code.\
\
ValidateAddress is the method.\
\
You can access the methods and properties of an object by first specifying the object name, and then by using these 2 characters--a hyphen and a greater-than sign--that together look like a single arrow.\
\
\
How to use a third party library, step by step:\
\
Include the library using the require_once command/call.\
\
Create a variable and assign it a new object as the value. In our case it looks like this:\
\
$checker = new PalprimeChecker();\
\
Next you want to define a given property(a variable in the object) that is defined in the third party library. In other words we want assign the property a particular value. In this case:\
\
$checker->number = 17;\
\
You then are going to determine if a particular value is true or false. We are going to use a method to do this. Remember that a method is just a function that is defined in a particular object.\
\
echo "The number " . $checker->number;\
if ($checker -> isPalprime())\{\
echo "is";\
\}\
else \{\
echo " is not";\
\}\
echo " a palprime.";\
\
\
Final set of code:\
\
<?php\
require_once('class.palprimechecker.php');\
$checker = new PalprimeChecker();\
$checker->number = 17;\
\
echo "The number " . $checker->number;\
if ($checker -> isPalprime())\{\
echo "is";\
\}\
else \{\
echo " is not";\
\}\
echo " a palprime.";\
\
?>\
\
\
Skipped over to Code-Academy for more Objects stuff:\
\
\pard\pardeftab720\sl440

\fs30 \cf8 PHP is an 
\b object-oriented programming language
\b0 , which means that you can create objects, which can contain variables and functions.\
\
Why we use objects: we can bundle our functions and data in one place, we can create objects easily using 
\i classes
\i0  (object constructors), so we can create lots of 
\i instances
\i0  (objects, which have been constructed via a class), which contain mostly the same data, except some little nuances.\
\

\fs28 On the right, there is a 
\i Person 
\i0\b class
\b0  and one 
\b instance
\b0  stored in 
\f3 $me
\f0  on {\field{\*\fldinst{HYPERLINK "javascript:void(0)"}}{\fldrslt \cf0 line 32}}. Then the
\f3 greet()
\f0  
\i method
\i0  of the 
\f3 $me 
\f0\i object
\i0  is called and the result is 
\f3 echo
\f0 d on {\field{\*\fldinst{HYPERLINK "javascript:void(0)"}}{\fldrslt \cf0 line 35}}.\
\

\fs30 <!DOCTYPE html>\
<html>\
    <head>\
      <title> Introduction to Object-Oriented Programming </title>\
      <link type='text/css' rel='stylesheet' href='style.css'/>\
    </head>\
	<body>\
      <p>\
      <?php\
        // The code below creates the class\
        class Person \{\
            // Creating some properties (variables tied to an object). These variables are defined in the public \
	   //function below.\
            public $isAlive = true;\
            public $firstname;\
            public $lastname;\
            public $age;\
            \
            // Assigning the values\
            public function __construct($firstname, $lastname, $age) \{\
              $this->firstname = $firstname;\
              $this->lastname = $lastname;\
              $this->age = $age;\
            \}\
            \
            // Creating a method (function tied to an object)\
            public function greet() \{\
              return "Hello, my name is " . $this->firstname . " " . $this->lastname . ". Nice to meet you! :-)";\
            \}\
          \}\
          \
        // Creating a new person called "boring 12345", who is 12345 years old ;-). Take a look here, this\
	//mimics the public function_construct above\
        $me = new Person('boring', '12345', 12345);\
        \
        // Printing out, what the greet method returns\
        echo $me->greet(); \
        ?>\
        </p>\
    </body>\
</html>\
\
\pard\pardeftab720\sl440\sa360
\cf8 How object-oriented programming is used in real life can be shown with a forum as an example:\
Every forum 
\i user
\i0  (object) has the same rights: he can 
\i log in
\i0  and 
\i write
\i0  (methods), can contain some 
\i settings
\i0  (properties), but every user has a different 
\i name
\i0 (another property).\
Every user is created easily, as you create a new 
\b instance
\b0  of a
\i User
\i0  
\b class
\b0  when you sign up. And as we've seen, there are some properties and methods that every instance has in common (such as logging in and writing), and there are some which are unique (such as each user's name).\
And without object-oriented programming\'97
\b OOP
\b0  for short\'97this could not be done that easily. ;-)\
Another example: on the right, there is a 
\f3\fs26 Person
\f0\fs30  
\i class
\i0 , so every
\f3\fs26 new Person
\f0\fs30  has some properties, like 
\f3\fs26 $isAlive
\f0\fs30  or
\f3\fs26 $firstname
\f0\fs30 , and a method
\f3\fs26 greet()
\f0\fs30 .\
Right now there is only one
\i instance
\i0  of the 
\f3\fs26 Person
\f0\fs30  
\i class
\i0 :
\f3\fs26 $me
\f0\fs30 . But we'll reconstruct this class and you'll even create another instance of the class, so your name will be 
\f3\fs26 echo
\f0\fs30 d, too.\
\pard\pardeftab720\sl440

\fs24 \cf0 \'85\'85\
\
Pieces of an object:\
\
Construct a class:\
Basic syntax of a class-\
class classname\{\
\}\
Class is created so it can be link properties to instances.\
eg:\
class Person \{\
            \
        \}\
\
Construct instances of this class:\
Basic Structure:\
$obj1 = new Classname();\
These instances will eventually pull from the properties that are created in the class.\
Eg:\
$teacher = new Person();\
$student = new Person();\
\pard\tx720\pardeftab720
\cf0 \
These are both separate instances of the class "person".\
\pard\pardeftab720\sl440
\cf0 The new keyword means that you create a new object and ensures that your arguments are added as properties, so it initializes the constructor (which we are going to deal with later).\
\
Now we add properties to our class. Syntax looks like so:\
class Classname \{\
  public $propertyname = "Some value";\
  public $otherProperty;\
\}\
\
You do not have to assign it a value, you can do that later although you can if you want.\
eg:\
class Person \{\
            public $isAlive = "true";\
            public $firstname;\
            public $lastname;\
            public $age;\
            \
        \}\
To access the property $propname of an existing $obj object, we have to use the following syntax:\
$obj->propname;\
eg:\
 $teacher = new Person();\
we have to create a constructor to create different objects. This constructor is also a method.\
The syntax:\
public function __construct($prop1, $prop2) \{\
  $this->prop1 = $prop1;\
  $this->prop2 = $prop2;\
\
You need to make sure that this is nested inside of the class. It should look like this:\
\
 \cf9 class Person \{		--->//Class\
            public $isAlive = true;  \
            public $firstname;\
            public $lastname;\
            public $age;\
\cf0         public function __construct($firstname, $lastname, $age) \{ --->//Construct\
          $this->firstname = $firstname;\
          $this->lastname = $lastname;\
          $this->age = $age;\
            \}\
        \}   \
Some things to keep in mind:\
-You're creating a function bound to a class (a method).\
-The constructor method has to be called __construct().\
- Finally, the weird way to assign the values: $this->prop1 = $prop1 means that the value you pass in the __construct() function via the new keyword is assigned to $this, which represents the object you are dealing with, and ->prop1 is the actual property of the object.\
- By creating a new instance using the new keyword, you actually call this __construct() method, which constructs the object. And that's why we have to pass in some arguments when we create an instance of a class, since this is how the properties get set!\
\
How to create Methods:\
Basic Syntax:\
\
public function funcname($optionalParameter) \{\
  // Do something\
\}\
\
eg:\
public function greet() \{\
        return "Hello, my name is " . $this->firstname . " " . $this->lastname . ". Nice to meet you!:-)";\
         \}\
\
This also needs to be nested within the class.\
\
Final fully completed object:\
      <?php\
        class Person \{\
            public $isAlive = true;\
            public $firstname;\
            public $lastname;\
            public $age;\
            \
      \
        public function __construct($firstname, $lastname, $age) \{\
          $this->firstname = $firstname;\
          $this->lastname = $lastname;\
          $this->age = $age;\
        \}\
         public function greet() \{\
        return "Hello, my name is " . $this->firstname . " " . $this->lastname . ". Nice to meet you!:-)";\
         \}\
    \}\
        $teacher = new Person("boring","12345","12345");\
        $student = new Person("Goggles","Von Squeeken","24");\
   \
    echo $teacher -> greet();\
    echo $student -> greet();\
        ?>\
\
\
To review: Pieces of an object:\
\
1.Create the class. Remember this also includes the properties(variables that you will be using)\
2.Create the function construct.\
3. Create methods(more functions)\
4.Create instances. Call class construct\
5.echo out instances of methods.\
\
More on Objects:\
\
Check out the example in the below. We're demoing three useful built-in methods: is_a(), which we use to find out if a particular object is an instance of a given class; property_exists(), to see if an object has a given property; and method_exists(), to see if an object has a given method.\
\
Note that the first argument is the object we're checking, and the second is the class, property, or method name as a "string".\
\
<html>\
  <head>\
    <title>Class and Object Methods</title>\
  </head>\
  <body>\
    <p>\
      <?php\
        class Person \{\
          public $isAlive = true;\
          \
          function __construct($name) \{\
              $this->name = $name;\
          \}\
          \
         public function dance() \{\
            return "I'm dancing!";\
          \}\
        \}\
        \
        $me = new Person("Shane");\
        if (is_a($me, "Person")) \{\
          echo "I'm a person, ";\
        \}\
        if (property_exists($me, "name")) \{\
          echo "I have a name, ";\
        \}\
        if (method_exists($me, "dance")) \{\
          echo "and I know how to dance!";\
        \}\
      ?>\
    </p>\
  </body>\
</html>\
Inheritance:\
 Inheritance is a way for one class to take on the properties or methods of another, and is used to express an "is-a" relationship\'97for example, a Truck "is-a" Vehicle, so it could inherit from Vehicle, but a Motorcycle isn't a Truck, so it shouldn't inherit from Truck (though both could inherit from Vehicle).\
\
We can cause one PHP class to inherit from another with the extends keyword.\
\
<?php\
        class Shape \{\
          public $hasSides = true;\
        \}\
        \
        class Square extends Shape \{\
        \
        \}\
        \
        $square = new Square();\
        // Add your code below!\
        if (property_exists($square, "hasSides")) \{\
          echo "I have sides!";\
        \}\
      ?>\
\
Occasionally we want to set variables that don't change, however, and these are prefixed with the const keyword (short for constant).\
\
PHP lets us set constants on a class-by-class basis! The good news is that this means we can have many constants with the same name, so long as they're all in different classes. The bad news is that means we need to have some way of specifying which class we mean.\
\
Each class has its own scope, which is the context in which its variables can be used. In PHP, we can use ::, \cf2 the scope resolution operator\cf0 , to specify which constant we want, like so:\
\
 <?php\
      class Person \{\
          \
      \}\
      class Ninja extends Person \{\
         const stealth = "MAXIMUM";\
        \
      \}\
      if (Ninja::stealth) \{\
        echo Ninja::stealth;\
      \}\
      \
      \
      ?>\
\
\pard\pardeftab720\sl440

\fs28 \cf2 NOTE:
\fs24 \cf0  The Scope Resolution operator is a very important shortcut. You can also use it to select methods and properties within a class IF  you use the static keyword.\
\
\pard\pardeftab720\sl440\sa360

\fs30 \cf8 The 
\f3\fs26 static
\f0\fs30  keyword lets you use a class' property or method without having to create an instance of that class. It works like this:\
\pard\pardeftab720\sl440

\fs24 \cf8 <?php\
        class King \{\
          // Modify the code on line 10...\
          public static function proclaim() \{\
            echo "A kingly proclamation!";\
          \}\
        \}\
        // ...and call the method below!\
       echo King::proclaim();\
        \
      ?>\cf0 \
\
\pard\pardeftab720\sl440

\fs28 \cf3 Shirts 4 Mike, Deploying the Site:
\fs24 \cf0 \
\
I pretty much stopped here. If I am ever getting ready to launch a site, I will go over this section again.\
\
\
More Objects:\
\
Object Oriented Overview:\
\
Three areas of focus:\
1. Encapsulation: About organizing code into a format that is easily readable and extensible. Largely also about defining access to code.\
2. Inheritance: Allows us to create hierarchy, a method of establishing relationships\
3. Polymorphism: Allows us to present a type of contract or requirements of a class that can be shared.\
\
Classes: at the center of organizing our design. A class is a template for defining what is inside of an object. Classes will allow us to manage which items are visible to the outside.\
\
<?php\
class Product \{\
//class definitions go here!\
\}\
\
$p = new Product();\
?>\
 \
\
Properties have the ability to be:\
\
1. Public: can be accessed from anywhere in the code\
\
2. Protected: Can be accessed only from within the class itself or within parent or inherited classes\
\
3. Private: Can only be accessed by the class that has defined them.\
\
Note: Properties are public by default.\
\
var $name = public $name\
\
Access class properties with this symbol: ->\
\
For eg:\
\
<?php\
class Product \
\{\
 	public $name; //scope of the property\
\} \
\
 \
$p = new Product(); \
\
$p->name = "Space juice"; //defining the property.\
echo $p->name; //pay close attention to the lack of $ signs.\
 \
?>\
\
}