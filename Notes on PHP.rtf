{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;\red164\green8\blue0;\red255\green39\blue18;
\red134\green205\blue77;\red103\green103\blue103;\red77\green77\blue77;}
\margl1440\margr1440\vieww14060\viewh11400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs28 \cf2 CONDITIONALS: 
\b0\fs24 \cf0 \
\
Single = sign assigns the variable, double == sign confirms the variable. For example\
\
<?php\
$pageTitle="contact";\
if ($pageTitle =="contact") \{\
	echo "You are on the contact page!";\
\}\
?>\
\

\b\fs28 \cf2 Forms\
\

\b0 \cf0 Basic Forms:\
\

\fs24 <form \cf2 (Form Tag*)\cf0  method="post" action="contact-process.php" action ="contact-process.php"\cf2 (This is where the form is being sent)\cf0 > \
<table>\
		<tr>\
			<th>\
				<label for= "name">Name</label> \cf2 for=id in order for the label to know where to line up\cf0 \
			</th>\
			<td>\
				<input type="text" name= "name" id="name">\cf2  Great but only for single lines of text\cf0 \
			</td>\
		</tr>	\
		<tr>\
			<th>\
				<label for= "email">Email</label>\cf2  This tag attaches to a form field\cf0 \
			</th>\
			<td>\
				<input type="text" name= "email" id="email">\
			</td>\
		</tr>		\
		<tr>\
			<th>\
				<label for= "message">Message</label>\
			</th>\
			<td>\
				<textarea name= "message" id="message"></textarea> \cf2 good for large area of text\cf0 \
			</td>\
		</tr>				\
	</table>\
		<input type="submit" value="send">\
	</form>\
\

\fs36 \cf2 \
\
Arrays\
\

\fs24 \cf0 Array:  a variable that contains that contains other variables\
Array element: each variable within an array\
each element has an index that can be used to identify it. start at zero work your way up.\
\
Format of an array:\
\
<?php\
$variable = array("element0", "element1", "elementx")\
?>\
\
To access each individual element by number:\
\
<?php\
 echo $variable[x];\
?>\
\
You can also use concoction to express multiple variables at once like so:\
\
<?php\
echo $flavors [0] . $flavors [1];\
?>\
\
You can also count the number of variables using the count function:\
\
<?php\
echo count($variable);\
?>\
\
Too list all the variables (elements) at once you use the foreach command:\
\
<?php\
\
foreach ($flavors as $flavor) \{\
	echo $flavor;\
\}\
?>\
\
You can also add individual elements to an array.\
\
Lets say that you an array:\
\
<?php\
$products = array('Logo Shirt, Red', \
	'Mike the Frog Shirt, Black', \
	'Mike the Frog shirt, Blue' \
	);\
\
?>\
\
And you want to add another element. Ultimately, it will look like this:\
\
<?php\
$products = array('Logo Shirt, Red', \
	'Mike the Frog Shirt, Black', \
	'Mike the Frog shirt, Blue' \
	);\
\
?>\
\
<?php \
$products[] = 'Logo Shirt, Green'; \
?>\
\
If you want (recommended) you can also list all of the flavors with an empty array:\
\
<?php\
$products = array() ;\
$products[] = 'Logo Shirt, Red';\
$products[] = 'Mike the Frog Shirt, Black'; \
$products[]	= 'Mike the Frog shirt, Blue'; \
$products[] = 'Logo Shirt, Green'; \
?>\
\
This will allow you to give each element an ID which you can reference later. See example below:\
\
<?php\
$products = array() ;\
$products[101] = 'Logo Shirt, Red';\
$products[102] = 'Mike the Frog Shirt, Black'; \
$products[103]	= 'Mike the Frog shirt, Blue'; \
$products[104] = 'Logo Shirt, Green'; \
?>\
\
You can also assign elements non-numerical values. These are known as associative arrays.\
\
Example of an associative array:\
\
<?php $surfspots = array(); \
$surfspots["spotname"] = "Blacks Beach";\
$surfspots["bottom"] = "Sand/Deepwater Trench";\
$surfspots["Difficulty"] = 8;\
$surfspots["Crowd"] = "Aggresive, packed";\
?>\
\
\
<h1>Surf Spot Charactization</h1>\
\
\
<ul>\
\
	<li>Spot Name: <?php echo $surfspots["spotname"] ;?></li>\
	<li>Bottom Type: <?php echo $surfspots["bottom"] = "Sand/Deepwater Trench";?></li>\
	<li>Difficulty Level: <?php echo $surfspots["Difficulty"] = 8; ?></li>\
	<li>Crowd-Factor: <?php echo $surfspots["Crowd"] = "Aggresive, packed";?></li>\
\
</ul>\
\
Another example of the same thing is:\
\
<?php\
$surfspots = array(\
"spotname" => "Blacks Beach",\
"bottom" => "Sand/Deepwater Trench",\
"Difficulty" => 8,\
"Crowd" => "Aggresive, packed",\
);\
?>\
\
\
<h1>Surf Spot Charactization</h1>\
\
\
\
<ul>\
\
	<li>Spot Name: <?php echo $surfspots["spotname"] ;?></li>\
	<li>Bottom Type: <?php echo $surfspots["bottom"] = "Sand/Deepwater Trench";?></li>\
	<li>Difficulty Level: <?php echo $surfspots["Difficulty"] = 8; ?></li>\
	<li>Crowd-Factor: <?php echo $surfspots["Crowd"] = "Aggresive, packed";?></li>\
\
</ul>\
\
\
Nesting Arrays within Arrays\
\
This is also known as a multi dimensional array. Basically you can make each element in an array an array. Like so:\
\
<?php\
\
$surfspots = array();\
$surfspots[0] = array(\
	"spotname" => "Blacks Beach",\
	"bottom" => "Sand/Deepwater Trench",\
	"difficulty" => 8,\
	"crowd" => "Aggresive, packed",\
);\
\
$surfspots[1] = array(\
	"spotname" => "Rincon",\
	"bottom" => "Sand/pebbled",\
	"difficulty" => 5,\
	"crowd" => "Varies, usually crowded",\
);\
\
?>\
<?php foreach ($surfspots as $surfspot) \{ ?>\
<ul>\
	<li>Spot Name: <?php echo $surfspot["spotname"]; ?></li>\
	<li>Bottom Type: <?php echo $surfspot["bottom"]; ?></li>\
	<li>Difficulty Level: <?php echo $surfspot["difficulty"]; ?></li>\
	<li>Crowd-Factor: <?php echo $surfspot["crowd"]; ?></li>\
\
</ul>\
\
<?php \} ?>\
\
You can thing of each array as a different level. See shirts.php for more notes but I like to think of it like so:\
\
$surfspots = array(); -Level 1\
$surfspots[#] = array( -Level 2\
""spotname" => "Blacks Beach", -level 3\
\
Each level is nested in the level above it. So Level 2 are elements in Level 1 and Level 3 are elements in level 2.\
\
You should also pay close attention to the foreach loop in shirts.php.\
\
Understanding whitespace.\
\
Apparently whitespace in between html tags and php changes the form of the page. So for our t-shirt store in order to get rid of white space we echo our html tags. \
\
This is cool because it allows us to never break the php tags.\
\
Check it out:\
\
<?php \
$titlepage = "Mikes Full Catalog of Shirts";\
$section = "shirts";\
include ('inc/header.php'); \
?>\
	\
	<div class="section shirts page">\
\
		<div class="wrapper">\
\
			<h1>Mike's Full Catalog of shirts</h1>\
			<ul class="products">\
				\cf3 <!--pay close attention to the foreach loop below, its basically the basis for an array. EDIT: Changed it to include html-->\
\cf0 				<?php foreach ($products as $product) \{\
						echo '<li>';\
						echo '<a href = "#">';\
						echo '<img src="' . $product['img'] . '" alt="' . $product['name'] . '">';\
						echo '<p>View Details</p>';\
						echo '</a>';\
						echo '</li>';\
				\} ?>\
			</ul>	\
		</div>\
	</div>\
\
<?php include ('inc/footer.php'); ?>\
\
\
\
How to integrate with Paypal\
\
\
First I created a paypal account.\
\
Then you want to create a button. For the shirts 4 Mike site you want a shopping cart button. Then paypal asks for a product id. THIS IS THE SAME AS THE ID YOU USED IN PHP.\
\
You create the button.\
\
See the creating Paypal Buttons video.\
\
Basic jist of things is that paypal creates code for you site so you can create a button and then add it to the site. Now the cool thing is that you can change the values in your website and they will be reflected in the shopping cart. So if you want to change the name of the shirt or the sizes you can do so. Its pretty cool\'85BUT..anybody with a chrome developer tool and can also create fraudulent shirts for their own cart. The only thing they can't change is the price (thankfully).\
\
Most important step is that we update our products array with the paypal id:\
\
I have highlighted the number in the code below:\
\
<form target="paypal" action="https://www.paypal.com/cgi-bin/webscr" method="post">\
<input type="hidden" name="cmd" value="_s-xclick">\
<input type="hidden" name="hosted_button_id" value=\cf4 \cb5 "W43ETYM5ZJ8JA"\cf0 \cb1 >\
<table>\
\
Each item is going to have its own id, its important that we add that id to the products array.\
\
\cf4 **The quiz was difficult here, if you are having issues later, you should probably take a look at it again.**\
\
\cf0 Including the Products Array:\
\
Things get a little trickier here, but basic idea is that we are going to have a t-shirt page for each individual shirt. Each of those pages are going to be pulling from the same list of product array. So the solution is use include to pull the data from another page. \
\
I create products.php, which is just basically our product list. I then deleted our products arrayout of shirts.php and put in an include command to pull the array to shirts.php.\
\
The next thing we want to do is modify our foreach loop to include the product key. There is another way that the foreach loop can be written so that it also loads the product key into the working variable:\
\
foreach ($variables as $key[this is the product #]=> $variable)\
\
An example of this in our document:\
\
foreach ($products as $product_id => $product) \
\
We also made it possible for each individual shirt to be a link to its own individual page with its own unique identity using that product id.\
\
echo '<a href="shirt.php?id=' . $product_id . '">';\
\
The thing to keep in mind about the above statement is that the periods separate each individual elements that need to be echoed. this is concatenation. General structure:\
\
echo 'x' . $variable . 'y';\
\
The thing that is weird about echoing links is that the link equation requires quotation marks like so:\
\
<a href="shirts.php">\
\
So that means you have to be aware of two sets of markings: the ' and the ".\
\
I don't think there is a whole lot else that needs to be said here, but the video lesson has a lot of detail so if you are confused at this step, take a look at "building the shirts detail page" lesson again.\
\
\
Adding Available Sizes:\
\
We are adding a third dimension array to our products pages.\
\
$products = array();\
$products[101] = array(\
    "name" => "Logo Shirt, Red",\
    "img" => "img/shirts/shirt-101.jpg",\
    "price" => 18,\
    "paypal" => "W43ETYM5ZJ8JA",\
    "sizes" => array('Small','Medium','Large')   -Sizes is another array.\
\
If we want to display those shirt sizes we have to go into the paypal form that we created earlier and change the option value to a php value/ chunk of code. \
\
Like so:\
\
<td><select name="os0" id="os0">\
	<?php foreach ($product["sizes"] as $size) \{ ?>\
		<option value="<?php echo $size; ?>"><?php echo $size; ?></option>\
	<?php \} ?>\
</select></td>\
\
More stuff on Arrays:\
\
Basic structure of an array and a foreach loop:\
\
<?php\
$array_name = array("key"=>"value", "key"=>"value","key"=>"value" \'85)\
\
foreach($array_name as $key=>$value) \{\
	echo (you can echo, $key, $values, etc) ;\
\}\
?>\
\
\
A couple of things to keep in mind. \
\
1. Even if you do not express a key, the server will automatically assign it a # based on order in relation to other values. \
2. Arrays come in many different forms.\
\
Introducing Functions:\
\
Functions: a block of code that can be called from within other blocks of code. Php has several functions built in.\
\
Count is actually a function.\
\
3 main parts to a function:\
\
Function name\
Argument list\
Return Value (e.g. with the count function this is the number of elements in the array)\
\
$return_value = function_name(Argument_List);\
\
Eg:\
\
$count=count($flavors);\
\
Introducing User Defined Functions:\
\
Structure:\
\
function = fucntion_name (argument_list) \{\
\}\
\
How to create a function:\
\
This is the basis for everything, if you are confused, review the video: \
\
Things to note: Variables created outside of a function are not available outside of a function. Your main code cannot see any of the variables inside of your function and your function can't see any of the variables outside of your function.\
\
\
Example of a function that mimics the count command. \
\
<?php\
\
function mimic_count ($array) \{\
\
	$count = 0;\
	foreach ($array as $element) \{\
		$count = $count + 1;\
	\}\
	return $count;\
\}\
\
$flavors = array('vanilla','chocolate', 'cookie dough' );\
$count = mimic_count($flavors);\
echo $count;\
\
?>\
\
Steps to building a function:\
\
Lets say you want to create a function that imitates the array_sum native command in php. This means that you want to create a function that adds up an array of assorted values.\
\
\
First create the array:\
\
eg:\
\
<?php\
\
$palindromic_primes = array(11, 757, 16361);\
\
?>\
\
Then create the function name, which you can continue to use throughout your php document.\
\
function mimic_array_sum($array) \{\}\
\
In this case the function is called mimic_array_ sum. Then you want to tell the function what to do with a foreach loop.\
\
In this case you\'92ll need to use a foreach command to loop through the argument array, a working variable to keep the running total, and a return command to send the sum back to the main code. Like so:\
\
function mimic_array_sum($array) \{\
\
	foreach ($array as $element)\{\
	$surf = $surf + $element;	\
\}\
return $surf;\
\
\}\
\
I used surf because I couldn't think of anything else, but you could use $boobs if you want it does not really matter.\
\
Lastly you can use the function anywhere you want in the code:\
\
Lets add that array we had earlier of weird primes.\
\
<?php\
$palindromic_primes = array(11, 757, 16361);\
$sum = mimic_array_sum($palindromic_primes);\
echo "If we add all of the palindromic primes together we get: " . $sum;\
?>
\f1 \
\

\f0 So finally all together it will look like so:\
\
function mimic_array_sum($array) \{\
\
$surf = 0;\
	foreach ($array as $element)\{\
	$surf = $surf + $element;	\
\}\
return $surf;\
\
\}\
\
\
\
$palindromic_primes = array(11, 757, 16361);\
$sum = mimic_array_sum($palindromic_primes);\
echo "If we add all of the palindromic primes together we get: " . $sum;\
\
?>\
\
Creating the Shirt Display Funciton\
\
On our website want to create a function that will load the HTML/ CSS into our main page and our shirts.php page.\
\
The function will look like so:\
\
function get_list_view_html($product_id, $product) \{\
//HTML output\
return $output;\
\}\
\
We put the function into an include file specifically products.php.\
\cf2 \
Note: \cf0 It does not matter what variables you use in the above function. They simply function as a place holder and help you identify why you created the function.\
\
On Products.php:\
\
<?php\
\
function get_list_view_html($product_id, $product) \{\
    \
    $output = "";\
    $output = $output . '<li>';\
    $output = $output . '<a href="shirt.php?id=' . $product_id . '">';\
    $output = $output . '<img src="' . $product['img'] . '" alt="' . $product['name'] . '">';\
    $output = $output . '<p>View Details</p>';\
    $output = $output .  '</a>';\
    $output = $output .  '</li>';\
\
    return $output;\
\}\
\
\
A couple of things to note here. Again I will reiterate, the variables in this function can be named anything. They are only relevant to their particular equation.\
\
$output is also a place holder of sorts. It holds the values as you add onto it and it also functions as the variable that is returned to the document.\
\
On Index.php and shirts.php:\
\
<?php foreach ($products as $product_id => $product) \{\
	echo get_list_view_html($product_id,$product);\
	\} \
?>		\
\
This is calling the function from products.php.\
\
Finished up functions exercises. I am not entirely sure why they did some of things that they did. But some interesting stuff:\
\
You can concatenate in a different order and change the output pretty significantly.\
\
For example: \
\
<?php \
	$total_products = count($products);\
	$position = 0;\
	$list_view_html = "";\
	foreach ($products as $product_id => $product) \{\
		$position = $position + 1;\
		if ($total_products - $position < 4) \{\
			\cf2 $list_view_html = get_list_view_html($product_id,$product) . $list_view_html; \cf6 //This li\cf7 ne will allow you display the shirts in reverse.\cf0 \
			\}\
		\}\
		echo $list_view_html; \
	?>\
\
I did not totally understand why he chose to change the code here. the $ position, $total products stuff was so that we could have the option of displaying only four shirts on the home page.				}