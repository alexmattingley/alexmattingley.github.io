{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 AndaleMono;
}
{\colortbl;\red255\green255\blue255;\red164\green8\blue0;\red255\green39\blue18;\red24\green24\blue24;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 CSS\
\
A Command in Css is called a rule. So for example:\
\
footer \{\
\
color: green;\
\
\}\
\
that is a rule.\
\
"footer" is a selector.\
\
"color:green;" is a property.\
\
Descendent selector: \
\
nav a \{\
\
$property;\
\
\}\
\
Will select the anchor elements inside of nav element.\
\
A rule of engagement:\
\
Css that comes later overrides CSS that comes earlier. For example, in the title tag, we want main.css comes after normalize.css.\
\
//\
\
Use ID Selectors:\
\
<div id="wrapper">\
\
Select the "wrapper" <div>.\
\
#wrapper \{\
\}\
\
\
margin property:\
\
#wrapper \{\
	margin: $top/$bottom $left/right;\
\}\
\
You can use two selectors in the same line. For example:\
\
h1, h2 \{\
$property\
\}\
\
This is the same as\
\
h1\{\
$property\
\}\
h2 \{\
$property\
\}\
\
\
\pard\pardeftab720

\f1\b \cf0 Pseudo-Class
\b0  - Dynamic selectors that change based on user interaction with the browser, such as hovering over a link, for example. Eg:\
\
nav a, nav a:visited \{\
	color: white;\
\}\
\
Differences between a class and an ID. Class can be used multiple times, and ID is unique and can only be used once.\
\

\fs28 Classes:\
\

\fs24 Select class: \
\
.selected \{\
\
$property\
 \
\}\
\
Select a class thats inside of an element.\
\
nav a.selected \{\
\
$property\
\
\}\
\
More selecting stuff:\
\
Lets say that you want to select a list item inside of an unordered list (class=contact-info) with the class "phone".\
\
This is what it will look like:\
\
\pard\pardeftab720\sl312\slmult1

\fs28 \cf0 .contact-info li.phone \{\
/*do something*/\
\}
\fs24 \
\pard\pardeftab720
\cf0 \
Notice the spacing. li is the child of contact.info so there is a space. Conversely, the class "phone" is part of the li that you are trying to select.\
\
\pard\pardeftab720

\f0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 Taking a Mobile First Approach:\
\
build the mobile site first and then worry about the more complex shit.\
\
A couple of steps to making a responsive site:\
\
1. Create Fluid images. First you set the image width to 100% and then we set all images to percentages essentially creating a grid. Percentages will allow the image to change sizes with the relative width of the container. Pixels are fixed units and will not adjust based on the size of the browser.\
2. Media Queries.\
\
Media Queries are refered to as a breakpoint. After determining breakpoints we add in mediaqueries.\
\
Media Queries:\
\
@media screen and (condition) \{\
	body \{\
	//do shit\
	\}\
\}\
\
Think of each of the above commands as a condition. If @media is not screen (for example, its print or something else) or condition is not met then the code will not be executed.\
\
The order of the breakpoints/media queries is really important. We want them to be able to override pervious styles of the page.\
\
\
Fonts:\
\
A couple of steps for custom fonts:\
\
1. Stick href into index document below normalize.css but above main.css. That is because we will be referring to it in our main.css, but we need to make sure that we are able to override normalize.css.\
2.Reference the fonts in CSS.\
\
You can refer to a specific type of a font (think bold, italics thin, etc) either using the keywords or using a number (which needs to reference google fonts). For example:\
\
nav a \{\
	font-weight: 800;\
\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs28 \cf2 ***Widths/styling:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs24 \cf0 \
check out how the images are styled here (3/10)\
\
\
img \{\
\
	max-width: 100%;\
\}\
\
This tells the images to fill the width of their parent container. in this case the <li> tag is the parent container. The parent container is going to be the next (up the chain) parent element that is a BLOCK element.\
\
So in this line of code:\
\
<div id="wrapper">\
		<section>\
			<ul id="gallery">\
				<li>\
					<a href="img/numbers-01.jpg">\
						<img src="img/numbers-01.jpg" alt="">\
						<p>Landscapes/Architecture</p>\
					</a>\
				</li>\
The Div Wrapper is the parent of Section is the parent of <ul> is the parent of <li> is the parent of <img>\
\
\
Float element:\
\
The float property allows the text to flow around an image.\
\
A note about floats: If you float and element, it no longer has an assumed width of 100%. You need to make sure that you specify if you want the element to span the width of the page.\
\
Clear Property: \
\
footer \{\
	clear: both;\
\}\
\
So I think this means that this will make it so there is no content on either side of the content in question.\
\
Block level v inline elements:\
\
Block level elements will take up space on the page and push other elements out of the way.\
\
In-line elements: are most just text, they will appear in-line with the surrounding text. images are \
\
In-line Block: will allow block elements to be side by side like in-line elements even if they are not inline elements. This will allow these elements to retain block level features like width and height.\
\
Images are normally displayed inline like text. displaying them block will give us more flexibility in our build. See the class ".profile-photo" \
\
\
Creating High Res images:\
\
 You can put images on the site that are double the size/pxs and then you can resize them in the site.\
\
How to use inspector:\
\
alt+command+i will open up inspector\
\
alt+command+c will allow you to edit in the inspector.\
\
Linking phone numbers and emails:\
\
<ul class="contact info">\
	<li class="phone"><a href="tel:805 455 6260">805 455 6260</a></li>\
	<li class="email"><a href="mailto:hellolulight@gmail.com">hellolulight@gmail.com</a></li>\
</ul>\
\
\
Testing a website:\
\
1. Test to make sure the sight works for someone who is color blind. Print it out in black and white.\
2. Flip it upside down (check out the composition)\
3. Blur everything, see aesthetics.\
\
Testing the code:\
\
HTML Testing:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://validator.w3.org/"}}{\fldrslt \cf0 http://validator.w3.org/}}\
\
CSS Testing:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://jigsaw.w3.org/css-validator/"}}{\fldrslt \cf0 http://jigsaw.w3.org/css-validator/}}\
\
Check out what the website looks like:\
\
browserstack, this will allow you to view what your website will look like in each browser.\
\
Use Developer Tools\
\
Shortcuts:\
\
command+option+i \
\
or to get straight to editing:\
\
command+option+c\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs28 \cf3 CSS Layouts\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\fs24 \cf0 Two different ways to reset browser settings:\
\
CSS Reset:\
\
\pard\pardeftab720

\f2\fs30 \cf4 /* http://meyerweb.com/eric/tools/css/reset/ \
   v2.0 | 20110126\
   License: none (public domain)\
*/\
\
html, body, div, span, applet, object, iframe,\
h1, h2, h3, h4, h5, h6, p, blockquote, pre,\
a, abbr, acronym, address, big, cite, code,\
del, dfn, em, img, ins, kbd, q, s, samp,\
small, strike, strong, sub, sup, tt, var,\
b, u, i, center,\
dl, dt, dd, ol, ul, li,\
fieldset, form, label, legend,\
table, caption, tbody, tfoot, thead, tr, th, td,\
article, aside, canvas, details, embed, \
figure, figcaption, footer, header, hgroup, \
menu, nav, output, ruby, section, summary,\
time, mark, audio, video \{\
	margin: 0;\
	padding: 0;\
	border: 0;\
	font-size: 100%;\
	font: inherit;\
	vertical-align: baseline;\
\}\
/* HTML5 display-role reset for older browsers */\
article, aside, details, figcaption, figure, \
footer, header, hgroup, menu, nav, section \{\
	display: block;\
\}\
body \{\
	line-height: 1;\
\}\
ol, ul \{\
	list-style: none;\
\}\
blockquote, q \{\
	quotes: none;\
\}\
blockquote:before, blockquote:after,\
q:before, q:after \{\
	content: '';\
	content: none;\
\}\
table \{\
	border-collapse: collapse;\
	border-spacing: 0;\
\}\
\

\f0\fs24 You copy and paste this set of code into the beginning of your CSS. This will remove, margins, padding, and default font sizes.\
\
Normalize.css is the other way to reset your CSS. I recommend using normalize.css.\
\
Inline v. Block Elements:\
\
See code for this exercise, I took my notes there.\
\
Table Display:\
\

\fs28 \cf2 I didn't take notes here. Rich is this important? Or is there a better way to vertically align elements?\
\
\

\fs24 \cf4 Box Sizing: This is really really important. A bug in CSS. Padding and margins, will increase the width of a parent container. So that means that you need to universally select all elements in the document to contract this. This looks a little bit like this:\
\
* \{\
	box-sizing: border-box;\
\}\
\
Vertically align:\
\
vertical-align: top;\
\
A lot of times when you make something inline-block it aligns bottom. This is how fix that trend.\
\
How to create a sticky footer:\
\
Set all parent containers to \
\
height: 100%\
\
\
Floats:\
\
Floats take elements out of the normal flow of the document, and will cause the proceeding elements to wrap around them.\
\
If we float both the main-nav and the main-logo we can see what happens when we take both elements out of the normal flow of the document.\
\
\cf2 ***
\fs28 \cf2 Biggest problem is that floating an element can cause the parent element to collapse because it no longer honors the space around it. IF YOU DO NOT SET A MIN HEIGHT AND WIDTH, SHIT WILL GET WEIRD. but this can also lead to some problems.***\
\
\pard\pardeftab720

\fs24 \cf0 Ultimately the best solution to this problem of collapse is to set a clear fix, which will force the parent element to clear its children.\
\
This is the clearfix hack: \
\
.group::after \{\
  content: "";\
  display: table;\
  clear: both;\
\}\
\
So in order to apply the clear fix you want to give the parent element that is collapsing the class of group. This is very very important.\
\
Another issue you start to run into is that the float starts to look weird in smaller browsers (i.e. phones, iPads)\
\
We want to make sure that we are able to make sure we set the initial value in the media query.\
\
Mobile First Layout:\
\
See CSS/HTML. They built this one for me and you have already done this so no repeat.
\fs28 \cf2 \
\
Positioning Techniques \
\
\
\pard\pardeftab720

\fs24 \cf4 Relative Positioning: If you position something as relative then it moves relative to its original position and does not effect the surrounding elements. The biggest issue you are going to run into is the element overflowing from its parent container. You want to make sure if that is happening you set the parent container to overflow: hidden;\
\
Absolute Positioning: Removes the element completely from the normal document flow and positions them relative to their containing div. If you give elements an offset of top: 0px; then they are going to line up with the top of the containing element. Biggest problem with absolute position is that it works kind of like the float, and can lead to container collapse, you need to make sure that you give the container a minimum height. CLEARFIX DOES NOT WORK HERE.\
\
Fixed Positioning: Best example of how to use fixed positioning is with a fixed header. Main issue with fixed header is that it will take on a lower z-index than absolutely positioned elements. This means that if you want a fixed header you have to make sure to fix the z-index. If you do not specify a z-index for other elements, anything higher than 1 will work.\
\
Absolute Centering: See webdocs for this one.\
\
\

\fs28 \cf2 Flexbox\
\pard\pardeftab720

\fs24 \cf0 \
Keep in mind that browser support is spotty for flex box. Namely IE-10 and Safari which have limited support. IE-10 actually has a completely different syntax so if you are going to use flex box then you have to be aware of that.\
\pard\pardeftab720

\fs28 \cf2 \
\pard\pardeftab720

\fs24 \cf0 First you need to establish a flex formatting context.\
\
We can layout the flex items in all sorts of ways. \
\
Flexbox Properties:\
\
align-self: center, right, etc;\
\
This will allow you to align elements in the center of a parent container.\
\
flex-grow: #;\
\
This will allow you to determine the size/ratio of elements to one another. if flex-grow: 1; then that means all of the elements in question are going to take up the exact amount of space.\
\
Animating Flexbox\
\
When paired with the transition property we can get elements to transit at a certain speed. They also did something fairly interesting with the icons. They actually pushed them outside of the parent div and then hid the overflow. Check out the \
\
.main logo a,\
.main nav a \{\
	overflow:hidden.\
\} \
\pard\pardeftab720
\cf4 \
Flexbox Columns:\
\
Create Flexbox formatting context by using display flex in the parent container. In this this case you want to target the class content row.\
\
.content-row \{\
		display: flex;\
	\}\
\
Then if you want to give the columns a specific width you want to use the flex property. In this case we want to originally give all of the columns an equal width, so we target each section;\
\
.content-row \{\
		display: flex;\
	\}\
we can also change the order of the columns using the order property.\
\
.primary-content \{\
		order: -1;\
	\}\
\
Never did the Lesson on Modenizr.\
\
\
\
Grid Layouts:\
\
Grids allow us to build sites easier. They can be thought of in terms of Rows and Columns.\
\
First you want to figure out how many columns and Rows you want. Then you want to determine the total width of the webpage along with the total width of each column and gutter.\
\
In our case each column is 65px and each gutter is 20px. We have a total of twelve columns. That means each column in this case is 6.5% of the total width.\
\
The you want to determine the width of each combination of columns.\
\
For example, the width of one column is 6.5%\
\
The width of two columns is 15%\
\
and so on and so forth.\
\
Next up you want add in global styles for each grid. Check out the Sublime doc for details. Some complicated selectors being used but the idea is pretty simple to understand.\
\
Then you need to add the different classes to the HTML. Don't forget about the containers\
}